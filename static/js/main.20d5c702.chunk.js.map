{"version":3,"sources":["images/bowser.png","images/mario.png","images/wario.jpg","images/yoshi.jpg","images/toad.jpg","images/DK.jpg","images/luigi.jpg","images/peach.jpg","images/losingGif.gif","components/Card.js","components/Score.js","components/Form.js","components/Modal.js","components/Leaderboard.js","App.js","index.js"],"names":["module","exports","Card","props","isFlipped","flipped","flipDirection","className","onClick","click","src","image","alt","Score","score","turns","timer","Form","state","username","time","updateUsername","e","setState","target","value","componentDidMount","sendData","a","fetch","method","headers","body","JSON","stringify","response","preventDefault","json","data","console","log","type","placeholder","onChange","this","React","Component","Modals","open","onClose","center","styles","modal","width","height","borderRadius","fontFamily","color","animation","form","Leaderboard","players","then","manipulateData","i","length","push","sort","b","map","player","index","App","message","cards","Luigi","id","Toad","Bowser","Yoshi","Peach","Wario","Mario","DK","firstFlip","secondFlip","active","openWinModal","openLoseModal","hasGameStarted","boardView","intervalID","startGame","setInterval","checkGameLost","handleSelect","newCards","currentCard","decreaseTurns","setTimeout","increaseScore","checkGameWon","clearInterval","every","restartHandler","newState","parse","toggleView","LoseGif","card","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20d5c702.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bowser.b296e163.png\";","module.exports = __webpack_public_path__ + \"static/media/mario.e8bbb719.png\";","module.exports = __webpack_public_path__ + \"static/media/wario.3040aa08.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yoshi.6cd29b98.jpg\";","module.exports = __webpack_public_path__ + \"static/media/toad.99e77606.jpg\";","module.exports = __webpack_public_path__ + \"static/media/DK.6760cdce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/luigi.a782540d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/peach.2d74ed27.jpg\";","module.exports = __webpack_public_path__ + \"static/media/losingGif.074f465e.gif\";","import React from \"react\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\nimport \"../styles/Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <ReactCardFlip isFlipped={props.flipped} flipDirection=\"horizontal\">\r\n      <div className=\"card-front\" onClick={props.click}>\r\n        <p className=\"message\">Click Me!</p>\r\n      </div>\r\n      <div className=\"card-back\">\r\n        <img className=\"card-image\" src={props.image} alt=\"\" />\r\n      </div>\r\n    </ReactCardFlip>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"../styles/Score.css\";\r\n\r\nconst Score = (props) => {\r\n  return (\r\n    <div className=\"scoreTurns\">\r\n      <h2>Score: {props.score}</h2>\r\n      <h2>Turns: {props.turns}</h2>\r\n      <h2>Timer: {props.timer}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React from \"react\";\r\nimport \"../styles/Form.css\";\r\n\r\nclass Form extends React.Component {\r\n  state = {\r\n    username: \"\",\r\n    time: null,\r\n  };\r\n\r\n  updateUsername = (e) => {\r\n    this.setState({ username: e.target.value });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.setState({ time: 30 - this.props.timer });\r\n  };\r\n\r\n  sendData = async (e) => {\r\n    const response = await fetch(\r\n      \"http://localhost:4500/cardgameleaderboard/v1/players\",\r\n      {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          username: this.state.username,\r\n          time: this.state.time,\r\n        }),\r\n      }\r\n    );\r\n    e.preventDefault();\r\n    const data = await response.json();\r\n    console.log(data);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"mainForm\">\r\n        <h1 className=\"formTitle\">Congratualtions!</h1>\r\n        <h3 className=\"formTitle\">\r\n          Submit your name below to add your score to the Leaderboard!\r\n        </h3>\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Player Name\"\r\n            onChange={this.updateUsername}\r\n          ></input>\r\n          <p className=\"timer\">Your Time: {this.state.time}s</p>\r\n          <button type=\"submit\" onClick={this.sendData}>\r\n            SUBMIT!\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"react-responsive-modal/styles.css\";\r\nimport { Modal } from \"react-responsive-modal\";\r\nimport \"../styles/Modal.css\";\r\nimport Form from \"./Form\";\r\n\r\nconst Modals = (props) => {\r\n  return (\r\n    <div>\r\n      <Modal\r\n        open={props.open}\r\n        onClose={props.onClose}\r\n        center\r\n        styles={{\r\n          modal: {\r\n            width: \"400px\",\r\n            height: \"300px\",\r\n            borderRadius: \"15%\",\r\n            fontFamily: \"'Lemonada', cursive\",\r\n            color: \"#fff\",\r\n            animation: `${\r\n              props.open ? \"spinIn\" : \"spinOut\"\r\n            } 1500ms ease-in-out`,\r\n          },\r\n        }}\r\n      >\r\n        <img src={props.image} alt=\"\"></img>\r\n        {props.form ? <Form timer={props.timer} /> : null}\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modals;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/Leaderboard.css\";\r\n\r\nclass Leaderboard extends Component {\r\n  state = {\r\n    players: [],\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    await fetch(\"http://localhost:4500/cardgameleaderboard/v1/allplayers\")\r\n      .then((response) => response.json())\r\n      .then((data) => this.manipulateData(data));\r\n  };\r\n\r\n  manipulateData = (data) => {\r\n    let players = [];\r\n    for (let i = 0; i < data.data.length; i++) {\r\n      players.push([data.data[i].username, data.data[i].time]);\r\n    }\r\n    players.sort(function (a, b) {\r\n      if (a[1] < b[1]) return -1;\r\n      if (a[1] > b[1]) return 1;\r\n      return 0;\r\n    });\r\n    this.setState({ players: players });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"boardMain\">\r\n        <header>\r\n          <h1>HIGHSCORES</h1>\r\n          <div className=\"boardTitles\">\r\n            <h2 className=\"h2Titles\">PLACE</h2>\r\n            <h2 className=\"h2Titles\">NAME</h2>\r\n            <h2 className=\"h2Titles\">TIMES</h2>\r\n          </div>\r\n        </header>\r\n        {this.state.players.map((player, index) => {\r\n          return (\r\n            <main>\r\n              <div className=\"listBlock\">\r\n                <div className=\"playerLists1\">\r\n                  <p>{index + 1}</p>\r\n                </div>\r\n                <div className=\"playerLists\">\r\n                  <p>{player[0]}</p>\r\n                </div>\r\n                <div className=\"playerLists\">\r\n                  <p>{player[1]}</p>\r\n                </div>\r\n              </div>\r\n            </main>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Leaderboard;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./components/Card\";\r\nimport \"./styles/App.css\";\r\nimport LoseGif from \"./images/losingGif.gif\";\r\nimport Bowser from \"./images/bowser.png\";\r\nimport Mario from \"./images/mario.png\";\r\nimport Wario from \"./images/wario.jpg\";\r\nimport Yoshi from \"./images/yoshi.jpg\";\r\nimport Toad from \"./images/toad.jpg\";\r\nimport DK from \"./images/DK.jpg\";\r\nimport Luigi from \"./images/luigi.jpg\";\r\nimport Peach from \"./images/peach.jpg\";\r\nimport Score from \"./components/Score\";\r\nimport Confetti from \"react-dom-confetti\";\r\nimport \"react-responsive-modal/styles.css\";\r\nimport Modals from \"./components/Modal\";\r\nimport Leaderboard from \"./components/Leaderboard\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    message: \"Match the cards to win the game\",\r\n    cards: [\r\n      { flipped: false, image: Luigi, id: 1 },\r\n      { flipped: false, image: Toad, id: 2 },\r\n      { flipped: false, image: Bowser, id: 3 },\r\n      { flipped: false, image: Yoshi, id: 4 },\r\n      { flipped: false, image: Peach, id: 5 },\r\n      { flipped: false, image: Wario, id: 6 },\r\n      { flipped: false, image: Bowser, id: 7 },\r\n      { flipped: false, image: Mario, id: 8 },\r\n      { flipped: false, image: DK, id: 9 },\r\n      { flipped: false, image: Mario, id: 10 },\r\n      { flipped: false, image: Yoshi, id: 11 },\r\n      { flipped: false, image: Wario, id: 12 },\r\n      { flipped: false, image: Luigi, id: 13 },\r\n      { flipped: false, image: Peach, id: 14 },\r\n      { flipped: false, image: Toad, id: 15 },\r\n      { flipped: false, image: DK, id: 16 },\r\n    ],\r\n    firstFlip: null,\r\n    secondFlip: null,\r\n    score: 0,\r\n    turns: 25,\r\n    timer: 30,\r\n    active: false,\r\n    openWinModal: false,\r\n    openLoseModal: false,\r\n    hasGameStarted: false,\r\n    boardView: false,\r\n  };\r\n\r\n  intervalID = 0;\r\n\r\n  startGame = () => {\r\n    this.intervalID = setInterval(() => {\r\n      this.setState({ timer: this.state.timer - 1 });\r\n      this.checkGameLost();\r\n    }, 1000);\r\n    this.setState({ hasGameStarted: true });\r\n  };\r\n\r\n  handleSelect = (index) => {\r\n    const { cards, firstFlip, secondFlip, hasGameStarted } = this.state;\r\n\r\n    let newCards = cards;\r\n    let currentCard = newCards[index];\r\n    if (hasGameStarted == true) {\r\n      if (firstFlip == null && secondFlip == null && currentCard.flipped) {\r\n        // Check that the selected card isn't already flipped\r\n        this.decreaseTurns();\r\n        return;\r\n      } else if (firstFlip == null && secondFlip == null) {\r\n        // Flip the first card\r\n        this.decreaseTurns();\r\n        newCards[index].flipped = !currentCard.flipped;\r\n        currentCard.index = index;\r\n        this.setState({ cards: newCards, firstFlip: currentCard });\r\n      } else if (\r\n        currentCard.id !== firstFlip.id &&\r\n        firstFlip != null &&\r\n        secondFlip == null\r\n      ) {\r\n        // Flip the second card\r\n        this.decreaseTurns();\r\n        newCards[index].flipped = !currentCard.flipped;\r\n        this.setState({ cards: newCards, secondFlip: currentCard });\r\n\r\n        // Check the 2 flipped cards for a match\r\n        setTimeout(() => {\r\n          if (firstFlip.image !== currentCard.image) {\r\n            // Turn both back\r\n            newCards[firstFlip.index].flipped = false;\r\n            newCards[index].flipped = !currentCard.flipped;\r\n            this.setState({\r\n              cards: newCards,\r\n              secondFlip: null,\r\n              firstFlip: null,\r\n            });\r\n          } else {\r\n            // Keep them turned\r\n            this.increaseScore();\r\n            this.checkGameWon();\r\n            this.setState({\r\n              secondFlip: null,\r\n              firstFlip: null,\r\n            });\r\n          }\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  increaseScore = () => {\r\n    this.setState({ score: this.state.score + 1 });\r\n  };\r\n\r\n  decreaseTurns = () => {\r\n    this.setState({ turns: this.state.turns - 1 });\r\n    this.checkGameLost();\r\n  };\r\n\r\n  checkGameLost = () => {\r\n    if (this.state.turns === 0 || this.state.timer === 0) {\r\n      this.setState({ openLoseModal: true });\r\n      clearInterval(this.intervalID);\r\n    }\r\n  };\r\n\r\n  checkGameWon = () => {\r\n    const checker = this.state.cards.every((cards) => cards.flipped === true);\r\n    if (checker === true) {\r\n      this.setState({ active: true, openWinModal: true });\r\n      clearInterval(this.intervalID);\r\n    }\r\n  };\r\n\r\n  restartHandler = () => {\r\n    for (let i = 0; i < this.state.cards.length; i++) {\r\n      this.setState((state) => {\r\n        let newState = JSON.parse(JSON.stringify(state));\r\n        newState.cards[i].flipped = false;\r\n        return {\r\n          cards: newState.cards,\r\n        };\r\n      });\r\n    }\r\n    this.setState({\r\n      turns: 25,\r\n      score: 0,\r\n      firstFlip: null,\r\n      secondFlip: null,\r\n      timer: 30,\r\n      openWinModal: false,\r\n      openLoseModal: false,\r\n      hasGameStarted: false,\r\n    });\r\n    clearInterval(this.intervalID);\r\n  };\r\n\r\n  toggleView = () => {\r\n    this.setState({ boardView: !this.state.boardView });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      score,\r\n      turns,\r\n      timer,\r\n      cards,\r\n      message,\r\n      openWinModal,\r\n      openLoseModal,\r\n      boardView,\r\n    } = this.state;\r\n    return (\r\n      <section className=\"board\">\r\n        {boardView ? <Leaderboard /> : null}\r\n        <header className=\"header\">\r\n          <div className=\"title\">\r\n            <h1>MEMORY GAME</h1>\r\n          </div>\r\n          <div className=\"messages\">\r\n            <Score score={score} turns={turns} timer={timer} />\r\n          </div>\r\n          <button className=\"startButton\" onClick={this.startGame}>\r\n            START GAME\r\n          </button>\r\n        </header>\r\n        <Modals\r\n          open={openWinModal}\r\n          onClose={this.restartHandler}\r\n          image={null}\r\n          form={openWinModal}\r\n          timer={timer}\r\n        />\r\n        <Modals\r\n          open={openLoseModal}\r\n          onClose={this.restartHandler}\r\n          image={LoseGif}\r\n        />\r\n        <main className=\"mainBody\">\r\n          {cards.map((card, index) => {\r\n            return (\r\n              <>\r\n                <Card\r\n                  key={index}\r\n                  image={card.image}\r\n                  flipped={card.flipped}\r\n                  click={() => this.handleSelect(index)}\r\n                />\r\n                <Confetti active={this.state.active} />\r\n              </>\r\n            );\r\n          })}\r\n        </main>\r\n        <footer>\r\n          <button className=\"restartButton\" onClick={this.toggleView}>\r\n            Leaderboard\r\n          </button>\r\n          <p className=\"message1\">{message}</p>\r\n          <button className=\"restartButton\" onClick={this.restartHandler}>\r\n            RESTART\r\n          </button>\r\n        </footer>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}